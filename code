import pandas as pd
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional, GRU
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
medium_data = pd.read_csv('/content/Thirukural With Explanation.csv')
medium_data.head()
print('Number of records: ', medium_data.shape[0]) #rows
print('Number of fileds: ', medium_data.shape[1])  #columns
medium_data['Verse']
medium_data['Verse'] = medium_data['Verse'].apply(lambda x: x.replace(u'\xa0',u' '))  #xa0 unicode is replaced by space
medium_data['Verse'] = medium_data['Verse'].apply(lambda x: x.replace('\u200a',' '))  #u200a  ""
tokenizer = Tokenizer(oov_token='<oov>')    #out of vocabulary
tokenizer.fit_on_texts(medium_data['Verse']) # used to update the internal vocabulary based on a list of texts
total_words = len(tokenizer.word_index) + 1  #total number of words

print('Total Number of words: ', total_words)
print('Word: ID')
print("கெடும்: ", tokenizer.word_index['கெடும்'])
print("ஆற்றின்: ", tokenizer.word_index['ஆற்றின்'])
input_sequences = []                                     #use to store the sequence of the tokens
for line in medium_data['Verse']:
  token_list = tokenizer.texts_to_sequences([line])[0]   #converting texts to sequences

  for i in range(1, len(token_list)):
    n_gram_sequence = token_list[:i+1]
    input_sequences.append(n_gram_sequence)            #n-gram sequences is added to input sequences
print('Total input sequences: ', len(input_sequences))
max_sequence_len = max([len(x) for x in input_sequences])   #calculate the max sequence length
input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))
input_sequences[1]
#one-hot encoding
xs, labels = input_sequences[:,:-1], input_sequences[:,-1]           #extract all the columns in the input sequences except the last one
ys = tf.keras.utils.to_categorical(labels, num_classes=total_words)  #
print(xs[5])            #print the content in the input sequences at index 5
print(labels[5])
print(ys[5][14])        #specific sequences in one hot-encoding
model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len-1))
model.add(Bidirectional(LSTM(150)))
model.add(Dense(total_words, activation='softmax'))
adam = Adam(lr=0.01)
model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])
history = model.fit(xs, ys, epochs=50, verbose=1)
print(model)
import matplotlib.pyplot as plt
def plot_graphs(history, string):
  plt.plot(history.history[string])
  plt.xlabel("Epochs")
  plt.ylabel(string)
  plt.show()
plot_graphs(history, 'accuracy')
plot_graphs(history, 'loss')
seed_text = "அகர முதல"
next_words = 5

for _ in range(next_words):
    token_list = tokenizer.texts_to_sequences([seed_text])[0]
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
    predicted = model.predict(token_list, verbose=0)
    predicted_class = np.argmax(predicted)
    output_word = ""
    for word, index in tokenizer.word_index.items():
        if index == predicted_class:
            output_word = word
            break
    seed_text += " " + output_word
print(seed_text)
seed_text = "மலர்மிசை"
next_words = 6

for _ in range(next_words):
    token_list = tokenizer.texts_to_sequences([seed_text])[0]
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
    predicted = model.predict(token_list, verbose=0)
    predicted_class = np.argmax(predicted)
    output_word = ""
    for word, index in tokenizer.word_index.items():
        if index == predicted_class:
            output_word = word
            break
    seed_text += " " + output_word
print(seed_text)
seed_text = "இருவினையும்"
next_words = 4

for _ in range(next_words):
    token_list = tokenizer.texts_to_sequences([seed_text])[0]
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
    predicted = model.predict(token_list, verbose=0)
    predicted_class = np.argmax(predicted)
    output_word = ""
    for word, index in tokenizer.word_index.items():
        if index == predicted_class:
            output_word = word
            break
    seed_text += " " + output_word
print(seed_text)
